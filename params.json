{"name":"Red.github.io","tagline":"Red Programming Language","body":"Red Programming Language\r\n------------------------\r\n**Red** is a new programming language strongly inspired by [Rebol](http://rebol.com), but with a broader field of usage thanks to its native-code compiler, from system programming to high-level scripting, while providing modern support for concurrency and multi-core CPUs. \r\n\r\nRed has its own complete cross-platform toolchain, featuring two compilers, an interpreter and a linker, not depending on any third-party library, except for a Rebol2 interpreter, required during the bootstrap phase. Once complete, Red will be [self-hosted](http://en.wikipedia.org/wiki/Self-hosting).\r\n\r\nThe Red software stack also contains another language, **Red/System**, which is a low-level dialect of Red. It is a limited C-level language with a Red look'n feel, required to build Red's runtime library and be the target language of Red's compiler. More information at [red-lang.org](http://www.red-lang.org).\r\n\r\nMaking a Red \"Hello World\"\r\n------------------------\r\nThe Red toolchain comes as a single **half-megabyte** executable file that you can download from [here](http://www.red-lang.org/p/download.html) for the big-3 platforms. \r\n\r\n1. Put the downloaded **red** binary in a folder that's in the PATH, or just in the working folder.\r\n\r\n2. In a code or text editor, write the following Hello World program:\r\n\r\n        Red [\r\n        \tTitle: \"Simple hello world script\"\r\n        ]\r\n        \r\n        print \"Hello World!\"\r\n\r\n3. Save it under the name: **hello.red**\r\n\r\n4. From a terminal (works from DOS too), run it with:\r\n\r\n        $ red hello.red\r\n        \r\n5. You should see the Hello World! output.\r\n\r\n6. Want to generate a compiled executable from that program?\r\n\r\n        $ red -c hello.red\r\n        $ ./hello\r\n        \r\n7. Want to cross-compile to another supported platform?\r\n\r\n        $ red -t Windows hello.red\r\n        $ red -t Darwin hello.red\r\n        $ red -t Linux-ARM hello.red\r\n\r\n**The command-line options are:**\r\n\r\n    red [options] [file]\r\n\r\n**[file]**\r\n\r\nAny Red or Red/System source file. If no file and no option is provided, the REPL will be launched. If a file with no option is provided, the file will be simply run by the interpreter (*it is expected to be a Red script with no Red/System code*).\r\n\r\n**[options]**\r\n\r\n    -c, --compile                  : Forces generation of an executable in \r\n                                     the working folder.\r\n\r\n    -d, --debug, --debug-stabs     : Compile source file in debug mode. STABS\r\n                                     is supported for Linux targets.\r\n    \r\n    -dlib, --dynamic-lib           : Generate a shared library from the source\r\n                                     file.\r\n    \r\n    -h, --help                     : Output this help text.\r\n    \r\n    -o <file>, --output <file>     : Specify a non-default [path/][name] for\r\n                                     the generated binary file.\r\n    \r\n    -r, --no-runtime               : Do not include runtime during Red/System\r\n                                     source compilation.\r\n    \r\n    -t <ID>, --target <ID>         : Cross-compile to a different platform\r\n                                     target than the current one (see targets\r\n                                     table below).\r\n\t\r\n    -v <level>, --verbose <level>  : Set compilation verbosity level, 1-3 for\r\n                                     Red, 4-11 for Red/System.\r\n\t\r\n    -V, --version                  : Output binary version string.\r\n\t\r\n    --red-only                     : Stop just after Red-level compilation. \r\n                                     Use higher verbose level to see compiler\r\n                                     output. (internal debugging purpose)\r\n\t\r\nCross-compilation targets:\r\n\r\n    MSDOS        : Windows, x86, console (+ GUI) applications\r\n    Windows      : Windows, x86, GUI applications\r\n    Linux        : GNU/Linux, x86\r\n    Linux-ARM    : GNU/Linux, ARMv5, armel (soft-float)\r\n    RPi          : GNU/Linux, ARMv5, armhf (hard-float)\r\n    Darwin       : MacOSX Intel, console-only applications\r\n    Syllable     : Syllable OS, x86\r\n    FreeBSD\t\t : FreeBSD, x86\r\n    Android      : Android, ARMv5\r\n    Android-x86\t : Android, x86\r\n\r\n\r\nRunning the Red REPL\r\n-----------------------\r\n\r\n1. Just run the `red` binary with no option to access the [REPL](http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop).\r\n\r\n        -=== Red Console alpha version ===-\r\n        (only ASCII input supported)\r\n        \r\n        red>>\r\n\r\n1. You can use it to test rapidly some Red code:\r\n\r\n        red>> 1 + 2\r\n        == 3\r\n        \r\n        red>> inc: func [n][n + 1]\r\n        == func [n][n + 1]\r\n        \r\n        red>> inc 123\r\n        == 124\r\n\r\n\r\nRunning Red from the sources\r\n------------------------\r\nThe compiler and linker are currently written in Rebol. Please follow the instructions for installing the compiler toolchain in order to run it from sources:\r\n\r\n1. Clone this git repository or download an archive (`ZIP` button above or from [tagged packages](https://github.com/red/red/tags)).\r\n\r\n1. Download a Rebol interpreter suitable for your OS: [Windows](http://www.rebol.com/downloads/v278/rebol-core-278-3-1.exe), [Linux](http://www.rebol.com/downloads/v278/rebol-core-278-4-2.tar.gz), [Mac OS X](http://www.rebol.com/downloads/v278/rebol-core-278-2-5.tar.gz), [FreeBSD](http://www.rebol.com/downloads/v278/rebol-core-278-7-2.tar.gz), [OpenBSD](http://www.rebol.com/downloads/v278/rebol-core-278-9-4.tar.gz), [Solaris](http://www.rebol.com/downloads/v276/rebol-core-276-10-1.gz)\r\n\r\n1. Extract the `rebol` binary, put it in root folder, that's all!\r\n\r\n1. Let's test it: run `./rebol`, you'll see a `>>` prompt appear. Windows users need to double-click on the `rebol.exe` file to run it.\r\n\r\n1. From the REBOL console type:\r\n\r\n        >> do/args %red.r \"%tests/hello.red\"\r\n\r\nThe compilation process should finish with a `...output file size` message. The resulting binary is in the working folder. Windows users need to open a DOS console and run `hello.exe` from there.\r\n\r\nTo see the intermediary Red/System code generated by the compiler, use:\r\n\r\n        >> do/args %red.r \"-v 2 %tests/hello.red\"\r\n\r\nYou can also compile the Red console from source:\r\n \r\n        >> do/args %red.r \"%runtime/console/console.red\"\r\n        \r\nNote: the `-c` argument is not necessary when launching the Red toolchain from sources, as the default action is to compile the input script (the binary form default action is run the input script through the interpretor).\r\n \r\nContributing\r\n-------------------------\r\nIf you want to contribute code to the Red project be sure to read the [guidelines](https://github.com/red/red/wiki/Contributor-Guidelines) first.\r\n\r\nIt is usually a good idea to inform the Red team about what changes you are going to make in order to ensure that someone is not already working on the same thing. You can reach us through the [mailing-list](https://groups.google.com/forum/?hl=en#!forum/red-lang) or our [chat room](http://chat.stackoverflow.com/rooms/50258/red-development-team).\r\n\r\nSatisfied with the results of your change and want to issue a pull request on Github?\r\n\r\nMake sure the changes pass all the existing tests, add relevant tests to the test-suite and please test on as many platforms as you can. You can run all the tests using (from Rebol console, at repository root):\r\n \r\n        >> do %run-all.r\r\n\r\nAnti-virus false positive\r\n-------------------------\r\nSome anti-virus programs are a bit too sensitive and can wrongly report an alert on some binaries generated by Red, if that happens to you, please fill a ticket [here](https://github.com/red/red/issues), so we can report the false positive.\r\n\r\nLicense\r\n-------------------------\r\nBoth Red and Red/System are published under [BSD](http://www.opensource.org/licenses/bsd-3-clause) license, runtime is under [BSL](http://www.boost.org/users/license.html) license. BSL is a bit more permissive license than BSD, more suitable for the runtime parts.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}